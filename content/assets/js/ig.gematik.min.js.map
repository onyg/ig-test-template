{"version":3,"file":"ig.gematik.min.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,YAAa,GAAIH,GACE,iBAAZC,QACdA,QAAmB,UAAID,IAEvBD,EAAgB,UAAIC,GACrB,CATD,CASGK,MAAM,I,MCDT,SAASC,IACLC,SAASC,iBAAiB,6BAA6BC,SAAQ,SAAAC,GAC3D,IACI,IACMC,EADSD,EAAIE,cACQC,YAE3B,GAAIF,EAAc,EAAG,CACjBD,EAAII,MAAMC,MAAQJ,EAAc,KAChC,IAAMK,EAAcN,EAAIO,QAAQC,QAAQH,MAAQL,EAAIO,QAAQC,QAAQC,OACpET,EAAII,MAAMK,OAAUR,EAAcK,EAAe,IACrD,CACJ,CAAE,MAAOI,GACLC,QAAQD,MAAM,4BAA6BA,EAC/C,CACJ,GACJ,C,OAtBAE,OAAOC,YAAcD,OAAOC,aAAe,CACvCC,0BAA2B,qBAC3BC,wBAAyB,qBAkI7BlB,SAASmB,iBAAiB,oBAAoB,WAC1C,IACIpB,IA5GEqB,EAAa,IAAIC,cACvBrB,SAASC,iBAAiB,6BAA6BC,SAAQ,SAAAC,GAC3D,IACI,IAAMmB,EAAYF,EAAWG,kBAAkBpB,GAEzCqB,EAAO,IAAIC,KAAK,CADA,2CAA6CH,GAC5B,CAAEI,KAAM,kBACzCC,EAAe3B,SAAS4B,cAAc,KAC5CD,EAAaE,KAAOC,IAAIC,gBAAgBP,GACxCG,EAAaK,SAAW,iBACxBL,EAAaM,UAAUC,IAAI,uBAC3BP,EAAaQ,UAAYpB,OAAOC,YAAYE,wBAE5C,IAAMkB,EAAsBpC,SAAS4B,cAAc,OACnDQ,EAAoBH,UAAUC,IAAI,mCAClCE,EAAoBC,YAAYV,GAChCxB,EAAIE,cAAciC,OAAOF,EAC7B,CAAE,MAAOvB,GACLC,QAAQD,MAAM,yBAA0BA,EAC5C,CACJ,IAKAb,SAASC,iBAAiB,6BAA6BC,SAAQ,SAAAqC,GAC3D,IACI,IAAMC,EAAW,IAAIC,MACrBD,EAASE,IAAMH,EAAIG,IACnBF,EAASG,OAAS,WACd,IACI,IAAMC,EAAS5C,SAAS4B,cAAc,UACtCgB,EAAOpC,MAAQgC,EAASK,aACxBD,EAAOhC,OAAS4B,EAASM,cACTF,EAAOG,WAAW,MAC1BC,UAAUR,EAAU,EAAG,EAAGA,EAASK,aAAcL,EAASM,eAClEF,EAAOK,QAAO,SAAAzB,GACV,IACI,IAAMG,EAAe3B,SAAS4B,cAAc,KAC5CD,EAAaE,KAAOC,IAAIC,gBAAgBP,GACxCG,EAAaK,SAAWQ,EAASE,IAAIQ,MAAM,KAAKC,MAChDxB,EAAaM,UAAUC,IAAI,uBAC3BP,EAAaQ,UAAYpB,OAAOC,YAAYC,0BAE5C,IAAMmB,EAAsBpC,SAAS4B,cAAc,OACnDQ,EAAoBH,UAAUC,IAAI,mCAClCE,EAAoBC,YAAYV,GAChCY,EAAIlC,cAAciC,OAAOF,EAC7B,CAAE,MAAOvB,GACLC,QAAQD,MAAM,0CAA2CA,EAC7D,CACJ,GAAG,YACP,CAAE,MAAOA,GACLC,QAAQD,MAAM,iCAAkCA,EACpD,CACJ,CACJ,CAAE,MAAOA,GACLC,QAAQD,MAAM,uBAAwBA,EAC1C,CACJ,IAIAb,SAASC,iBAAiB,mBAAmBC,SAAQ,SAAAkD,GACjD,IAAMC,EAAUrD,SAAS4B,cAAc,OACvCyB,EAAQpB,UAAUC,IAAI,0BAEtB,IAAMoB,EAAStD,SAAS4B,cAAc,OACtC0B,EAAOrB,UAAUC,IAAI,yBACrBmB,EAAQhB,YAAYiB,GAEpB,IAAMC,EAAQvD,SAAS4B,cAAc,QACrC2B,EAAMC,YAAcJ,EAAeK,aAAa,eAAiB,GACjEF,EAAMtB,UAAUC,IAAI,wBAEpB,IAAMwB,EAAe1D,SAAS4B,cAAc,UAC5C8B,EAAazB,UAAUC,IAAI,yBAE3BoB,EAAOjB,YAAYqB,GACnBJ,EAAOjB,YAAYkB,GAEnB,IAAMI,EAAiB3D,SAAS4B,cAAc,OAC9C+B,EAAe1B,UAAUC,IAAI,0BAC7ByB,EAAeC,UAAYR,EAAeQ,UAC1CD,EAAepD,MAAMsD,QAAU,OAC/BR,EAAQhB,YAAYsB,GAEpBD,EAAaF,YAAc,IAE3B,IAAMM,EAAgB,WACmB,SAAjCH,EAAepD,MAAMsD,SACrBF,EAAepD,MAAMsD,QAAU,QAC/BH,EAAaF,YAAc,MAE3BG,EAAepD,MAAMsD,QAAU,OAC/BH,EAAaF,YAAc,IAEnC,EACAE,EAAavC,iBAAiB,QAAS2C,GACvCP,EAAMpC,iBAAiB,QAAS2C,GAEhCV,EAAeW,WAAWC,aAAaX,EAASD,GAChDA,EAAea,QACnB,GAUA,CAAE,MAAOpD,GACLC,QAAQD,MAAM,gCAAiCA,EACnD,CAnHJ,IACUO,CAmHV,IAGAL,OAAOI,iBAAiB,UAAU,WAC9B,IACIpB,GACJ,CAAE,MAAOc,GACLC,QAAQD,MAAM,6CAA8CA,EAChE,CACJ,I","sources":["webpack://FHIRIGDOC/webpack/universalModuleDefinition","webpack://FHIRIGDOC/./src/main.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"FHIRIGDOC\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"FHIRIGDOC\"] = factory();\n\telse\n\t\troot[\"FHIRIGDOC\"] = factory();\n})(self, () => {\nreturn ","// Global variables for labels\nwindow.gemIGLabels = window.gemIGLabels || {\n    GEM_Download_Button_Image: \"Bild herunterladen\",\n    GEM_Download_Button_SVG: \"SVG herunterladen\"\n};\n\n\n// Function to resize all SVGs to match the width of their parent container while maintaining aspect ratio\nfunction resizeSVGs() {\n    document.querySelectorAll('.gem-ig-svg-container svg').forEach(svg => {\n        try {\n            const parent = svg.parentElement;\n            const parentWidth = parent.clientWidth;\n\n            if (parentWidth > 0) {\n                svg.style.width = parentWidth + 'px';\n                const aspectRatio = svg.viewBox.baseVal.width / svg.viewBox.baseVal.height;\n                svg.style.height = (parentWidth / aspectRatio) + 'px';\n            }\n        } catch (error) {\n            console.error('Error adjusting SVG size:', error);\n        }\n    });\n}\n\n// Function to create a download link for each SVG, allowing users to download them as files\nfunction downloadSVG() {\n    const serializer = new XMLSerializer();\n    document.querySelectorAll('.gem-ig-svg-container svg').forEach(svg => {\n        try {\n            const svgString = serializer.serializeToString(svg);\n            const svgWithProlog = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n' + svgString;\n            const blob = new Blob([svgWithProlog], { type: 'image/svg+xml' });\n            const downloadLink = document.createElement('a');\n            downloadLink.href = URL.createObjectURL(blob);\n            downloadLink.download = 'downloaded.svg';\n            downloadLink.classList.add('gem-ig-download-btn');\n            downloadLink.innerText = window.gemIGLabels.GEM_Download_Button_SVG;\n\n            const downloadLinkWrapper = document.createElement('div');\n            downloadLinkWrapper.classList.add('gem-ig-svg-downloadlink-wrapper');\n            downloadLinkWrapper.appendChild(downloadLink);\n            svg.parentElement.append(downloadLinkWrapper);\n        } catch (error) {\n            console.error('Error downloading SVG:', error);\n        }\n    });\n}\n\n// Function to create a download link for each image, allowing users to download them as PNG files\nfunction downloadImages() {\n    document.querySelectorAll('.gem-ig-img-container img').forEach(img => {\n        try {\n            const imgClone = new Image();\n            imgClone.src = img.src;\n            imgClone.onload = () => {\n                try {\n                    const canvas = document.createElement('canvas');\n                    canvas.width = imgClone.naturalWidth;\n                    canvas.height = imgClone.naturalHeight;\n                    const context = canvas.getContext('2d');\n                    context.drawImage(imgClone, 0, 0, imgClone.naturalWidth, imgClone.naturalHeight);\n                    canvas.toBlob(blob => {\n                        try {\n                            const downloadLink = document.createElement('a');\n                            downloadLink.href = URL.createObjectURL(blob);\n                            downloadLink.download = imgClone.src.split('/').pop();\n                            downloadLink.classList.add('gem-ig-download-btn');\n                            downloadLink.innerText = window.gemIGLabels.GEM_Download_Button_Image;\n\n                            const downloadLinkWrapper = document.createElement('div');\n                            downloadLinkWrapper.classList.add('gem-ig-img-downloadlink-wrapper');\n                            downloadLinkWrapper.appendChild(downloadLink);\n                            img.parentElement.append(downloadLinkWrapper);\n                        } catch (error) {\n                            console.error('Error creating download link for image:', error);\n                        }\n                    }, 'image/png');\n                } catch (error) {\n                    console.error('Error drawing image on canvas:', error);\n                }\n            };\n        } catch (error) {\n            console.error('Error loading image:', error);\n        }\n    });\n}\n\nfunction enableExamples() {\n    document.querySelectorAll('.gem-ig-example').forEach(exampleElement => {\n        const wrapper = document.createElement('div');\n        wrapper.classList.add('gem-ig-example-wrapper');\n\n        const header = document.createElement('div');\n        header.classList.add('gem-ig-example-header');\n        wrapper.appendChild(header);\n\n        const title = document.createElement('span');\n        title.textContent = exampleElement.getAttribute('data-title') || '';\n        title.classList.add('gem-ig-example-title');\n\n        const toggleButton = document.createElement('button');\n        toggleButton.classList.add('gem-ig-example-toggle');\n        \n        header.appendChild(toggleButton);\n        header.appendChild(title);\n\n        const contentWrapper = document.createElement('div');\n        contentWrapper.classList.add('gem-ig-example-content');\n        contentWrapper.innerHTML = exampleElement.innerHTML;\n        contentWrapper.style.display = 'none';\n        wrapper.appendChild(contentWrapper);\n\n        toggleButton.textContent = '▼';\n        // Add button click\n        const toggleContent = ()  => {\n            if (contentWrapper.style.display === 'none') {\n                contentWrapper.style.display = 'block';\n                toggleButton.textContent = '►';\n            } else {\n                contentWrapper.style.display = 'none';\n                toggleButton.textContent = '▼';\n            }\n        }\n        toggleButton.addEventListener('click', toggleContent);\n        title.addEventListener('click', toggleContent);\n\n        exampleElement.parentNode.insertBefore(wrapper, exampleElement);\n        exampleElement.remove(); // Remove original\n    });\n}\n\n// Set up event listeners to initialize functions when the page has fully loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    try {\n        resizeSVGs();\n        downloadSVG();\n        downloadImages();\n        enableExamples();\n    } catch (error) {\n        console.error('Error initializing functions:', error);\n    }\n});\n\n// Set up event listener to resize SVGs when the browser window is resized\nwindow.addEventListener('resize', () => {\n    try {\n        resizeSVGs();\n    } catch (error) {\n        console.error('Error adjusting SVG size on window resize:', error);\n    }\n});"],"names":["root","factory","exports","module","define","amd","self","resizeSVGs","document","querySelectorAll","forEach","svg","parentWidth","parentElement","clientWidth","style","width","aspectRatio","viewBox","baseVal","height","error","console","window","gemIGLabels","GEM_Download_Button_Image","GEM_Download_Button_SVG","addEventListener","serializer","XMLSerializer","svgString","serializeToString","blob","Blob","type","downloadLink","createElement","href","URL","createObjectURL","download","classList","add","innerText","downloadLinkWrapper","appendChild","append","img","imgClone","Image","src","onload","canvas","naturalWidth","naturalHeight","getContext","drawImage","toBlob","split","pop","exampleElement","wrapper","header","title","textContent","getAttribute","toggleButton","contentWrapper","innerHTML","display","toggleContent","parentNode","insertBefore","remove"],"sourceRoot":""}